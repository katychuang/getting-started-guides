#+TITLE:     Getting started with GitHub
#+SUBTITLE:  Department of Computer & Information Science, Brooklyn College
#+AUTHOR:    Katherine Chuang
#+EMAIL:     chuang@sci.brooklyn.cuny.edu
#+CREATOR:   katychuang
#+DATE:      2020-05-01
#+OPTIONS:   H:3 num:n toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc

# #+HTML_HEAD: <style type="text/css">
# #+HTML_HEAD:  dl dd {text-align: left; margin-left: 10px}
# #+HTML_HEAD: </style>
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../assets/style.min.css"/>
#  #+EXPORT_FILE_NAME: ../docs/vcs/github.html

#+HUGO_BASE_DIR: ../hugo/
#+HUGO_SECTION: guides
#+HUGO_CATEGORIES: git vcs
#+EXPORT_HUGO_SECTION: github

* Getting started with GitHub       :@git:@vcs:
:PROPERTIES:
:UNNUMBERED: toc
:END:

#+TOC: headlines 2 local

*** What is GitHub?

GitHub (https://github.com/) is a hosting platform for version control with collaborative features. It uses the Git version control technology.

**** What is version control?

Version control systems (VCS) are used in managing revision control of project artifacts such as source code and documentation. VCS are used for maintaining a history of changes to each artifact. Artifacts can include documents, source code, and much more.


There are two main approaches to version control management systems. That is, they can either be centralized, or decentralized repositories. This page covers Git is a decentralized system.

**** Motivations for Source Version Control
Some of the motivations for version control include the following:

- Keeping track of code
- Storing versions of code changes
- Restoring previous versions
- Reviewing work history
- Collaborating in a group
- Backup

*** What is GitHub used for?

GitHub is used for version control, which enables the ability for team collaboration on a single codebase. Often you'll see that open source software is published here, as there are other features such as star/fork/issues for others to collaborate on the project progress.


*** How do you create a GitHub account?

Go to https://github.com/join in a web browser and fill in the form.

*** How do I start using GitHub?

The first time you use GitHub (and the first time using GitHub with any new machine), you need to set up the SSH connection between your local machine and the GitHub server so that they know it's you publishing code to your account.

Follow the sections linked from this GitHub Documentation page [[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh][Connecting to GitHub with SSH]]. Don't blindly follow all the sections, start from the top and consider whether you need to move onto the next section.

Often times it's enough to use a single public key for most projects as you're starting out. This public key is often saved in the location `~/.ssh` The `~` symbol is called a tilde and it often signifies the home directory.

*** How do I start a project with GitHub?

/work in progress/


*** How do I work on an existing repository?

/work in progress/


*** What is the workflow for using GitHub?

/work in progress/

*** Where can I get more help?

GitHub publishes some guides on using GitHub effectively at https://guides.github.com/

GitHub also maintains a GitHub.com Help Documentation at https://docs.github.com/en/github

* Glossary
:PROPERTIES:
:UNNUMBERED: toc
:CUSTOM_ID: glossary
:END:

- Workspace :: this is where you have files you’re editing in a folder
- Stage :: this is where you put files or selected lines into an area to be given a commit message
- Commit Log :: a history of committed changes.

* Common Git Commands
:PROPERTIES:
:UNNUMBERED: toc
:CUSTOM_ID: commands
:END:

Common basic workflow steps:

+ ~git add~ moves the changes to the stage
+ ~git commit~ logs the staged code
+ ~git push origin master~ uploads the local master branch to server

Other common commands
+ ~git pull~ downloads latest version from server
   (~git fetch~ checks for changes but doesn’t download it)
+ ~git clone <git address>~ copies a server version to locally
+ ~git remote -v~ shows the server address

* What is Github Pages?

This is a feature provided by GitHub where you can host websites directly from your GitHub repository. These websites are typically static files, meaning there is no database no backend. For example, this website is hosted on GitHub Pages, it was built with a static site generator.

To find out more, go to https://pages.github.com

* How to create your home page (easy way)

When you use GitHub pages, you can access your website at the url http://username.github.io and the underlying files would be found in your repository, which is the repository can be found at url pattern http://github.com/username/username.github.io

This section walks you through step by step. These instructions are taken directly from GitHub's docs.

*Short version:*
1. Create a repo of name: *yourusername*.github.io
2. Go to that repo's settings and check the box for your pages (note the drop down option selected)
3. Add ~.html~ files to your repo

You should be able to access your website from ~http://yourusername.github.io~

*Longer version:*
1. From your account, create a new repo with the name following the pattern ~yourusername.github.io~ where you use your username to replace the part that says ~yourusername~ -- this is the basis for producing a website hosted by github pages (https://pages.github.com/).
2. Confirm that the pages feature is turned on for that repository, under the settings menu.
3. This allows you to host files under your GitHub account.
   a. You could use the github.com web interface to upload each file individually, however I recommended you take time at some point in your career to gain familiarity with the workflow of using git commands from your machine terminal.
   b. Upload the images and html files to that repo.
4. If set up properly you should be able to access your website from http://username.github.io
