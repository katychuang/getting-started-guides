#+TITLE: Sharing Coding Projects
#+SUBTITLE:  Department of Computer & Information Science, Brooklyn College
#+AUTHOR:    Katherine Chuang
#+EMAIL:     chuang@sci.brooklyn.cuny.edu
#+CREATOR:   katychuang
#+date:      2020-05-16
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+ALT_TITLE: Lecture Notes

#+HUGO_BASE_DIR: ../hugo/
#+HUGO_SECTION: Version Control
#+HUGO_CATEGORIES: projects

* Project based thinking

Programmers are typically learning to write source code to build programs not just scripts. A programming project requires far more than just fluency with a particular programming language syntax to cohesively put together.

Creating a program requires certain executive functioning skills to coordinate and manage. This guide provides some advice and items to consider include when sharing your codebase. It is not meant to be followed religiously, but instead to provide a framework to guide your approach.

#+BEGIN_QUOTE
/Programming is an activity that starts with a specification and leads to its solution as a program/ - Peter Van Roy
#+END_QUOTE

** Programming as an activity

- Programming can be done in micro (small tasks) or macro (very large projects)
- Programming can be language independent architectural issues, and language-depended coding issues
- Programming should be unbiased by limitations of any particular language, tool or design methodology

** Planning before you begin coding
You need to first figure out what needs to be built, by gathering the /requirements/.

-  What do you want to make? - can you describe the problem? how are you solving it?
- Sketch out your ideas  - how many classes are needed? how many functions?
- What technologies will you use? You need to consider which languages, libraries, or environments you're familiar with or willing to learn.

*** Software Development Life Cycle (SDLC)
:PROPERTIES:
:UNNUMBERED: TOC
:END:

A common model for presenting the phases of building software goes by the name of /Software Development Life Cycle/ or /SDLC/ for short. This models covers the principles of building a software application, which includes various phases of activities such as planning (such as gathering spec requirements), scheduling the work, development, and test.  The name for this set of phases is called /Software development lifecycle (SDLC)/. Some of these phases are described below.

**** Requirements Gathering
It helps to know what you're building before you begin building. Deciding what to build should come from discussions with
**** Scheduling
**** Design / Specifications
**** Building
**** Testing
**** Deployment

* File naming conventions
:PROPERTIES:
:EXPORT_DATE: 2020-01-28
:EXPORT_FILE_NAME:  1_filename
:END:


** Introduction

In the day to day work of programming, one often finds that a large fraction of time is spent looking for certain files. One of the wise adages with managing an assortment of files is to provide an organization scheme to make it easier to find what you need again. It not only helps you as the maintainer, but also helps your reader(s)** and collaborator(s) as well. This is a good habit to devleop before you find yourself managing hundreds of files.

** Motivations for naming files well

- It is more efficient to name your files correct such that it's easier to find.

- With the correct file extentions it is easier to collaborate with another programmer.

** Organizing your directory

A developer also considerrs file organization and directory naming schemes as well. There's no industry standard for this, just an organization level (if you join a team with a style guide), however there tends to be some common patterns to follow.

When you have a lot of tiles in your project directory, it is common to start thinking about the organization of contents.

The scheme itself can depend on the type of project. For example, if you're working on a web application you might split into layers such as the back-end from front-end features.

** Common File extensions

#+CAPTION: This is a table of some common file naming conventions.
#+attr_html: :class zebra-striping sane-table


| Language     | File Extension | Example      | Rules & Conventions                                                                  |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| <l>          | <l12>          | <l12>        | <l>                                                                                  |
| Java         | .java          | ~Main.java~  | - File name _must_ match the public class defined in the file<br>- Usually CamelCase |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| C++          | .cpp           | ~main.cpp~   | - C++ Programming File Organization[fn:1]                                            |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| Python       | .py            | ~main.py~    | - Often lowercased<br>- Pep8 Style Guidelines[fn:2]                                  |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| Scheme       | .scm           | ~main.scm~   | - Guile Scheme Manual<br>  - ยง6.18.5 Compiling Scheme Code[fn:3]                     |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| Markdown     | .md, .markdown | ~foo.md~     | - Markdown Syntax[fn:4]                                                              |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| HTML         | .htm, .html    | ~index.html~ | - Hypertext Markup Language<br>- Include doctype                                     |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| CSS          | .css           | ~style.css~  | - Cascading Style Sheets                                                             |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| XML          | .xml           | ~pom.xml~    | - Extensible Markup Language                                                         |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| JavaScript   | .js            | ~script.js~  |                                                                                      |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| Haskell      | .hs            | ~Main.hs~    |                                                                                      |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|
| Shell Script | .sh            | ~build.sh~   | - add a shebang at the the top, ~#!/bin/sh~                                          |
|--------------+----------------+--------------+--------------------------------------------------------------------------------------|

** Common Directory Names

- ~/src~ - for your packages & classes
- ~/test~ - for unit tests
- ~/docs~ - for documentation, generated and manually edited
- ~/lib~ - 3rd party libraries
- ~/etc~ - unrelated stuff
- ~/bin~ (or /classes) - compiled classes, output of your compile
- ~/dist~ - for distribution packages, hopefully auto generated by a build system

from https://stackoverflow.com/a/8594

** Ignoring files with your VCS repository

If you're using Git you can specify a ~.gitignore~ file that contains a list of filenames to ignore

- https://www.atlassian.com/git/tutorials/saving-changes/gitignore
- https://git-scm.com/docs/gitignore


* Include a README with your project
:PROPERTIES:
:EXPORT_FILE_NAME: 2_readme
:EXPORT_DATE:   2020-10-01
:END:

** What is a README?
This is a file that is named ~README~, that usually resides in the root of your project directory. This name comes from the command *Read me.* as in the situation of handing a project off to another developer and writing a memo to them that should be read first before the source code.

In a way, it serves as an executive summary of your project. It gives your reader a chance to understand what's going on since source code doesn't describe the intent and purpose of projects very well.

** What should go into a README?

The readme should contain description about what the project is about, and also information to build and/or run your program.

An example of a barebones README can be found at https://github.com/cisc3130-s20/assignment-template

Within this file it starts with the title of the project, followed by instructions for setting up a development environment and then some info on where code can be saved.

There's generally no industry standard on the order sections should go or how to name the sections. It's generally based on what makes sense to you, and/or what you think would help your reader.

** Formatting a README

This file is usually a text file. It can be written in plain text, however you can also choose to use some sort of formatting if you're publishing your project on GitHub and the like. That formatting is called ~markdown~ - it is a way to help your text be more readable on the web page.

 For example, if you want to add a title to your markdown you can use a single ~#~ symbol to mark it as a heading level 1 (top level). You can add inline code snippets using the ` character or a code block with three ticks as fences around the section.

 The other formatting possibilities like bold and italics is a lot like formatting chat messages in discord and slack, with a mixture of _, *, ~ symbols to mean varoius things. Take a look at the markdown page for more guidance.

** Read more about READMEs

- Make a README because no one can read your mind https://www.makeareadme.com/
* Checklists
:PROPERTIES:
:EXPORT_FILE_NAME: 4_checklist
:END:

** Elements to include with your project repository
:PROPERTIES:
:NUMBERED: toc
:END:

Note that these items do not include anything about /documentation/, which should also be included with coding projects.

*** [ ]  1. Project description
    - Description of the program such as a [README file](https://www.makeareadme.com/)
    - Project requirement(s) and tracking. Sample approaches listed below:
        - [TODO file to track their task list](https://github.blog/2014-04-28-task-lists-in-all-markdown-documents/)
        - [CHANGELOG file](https://keepachangelog.com/en/1.0.0/) to track revisions,
        - Use issue tracker that comes with a github repo, respond to issues in your commit messages
        - Whatever else you think of that is relevant
    - [ ]  Instructions on how to run your program or code
    - [ ]  Description of technologies used

*** [ ]  2. Source code with comments
    - [ ]  Comments describe why each class and function exist
    - [ ]  Comments describe any conditional or control flow logic

*** [ ]  3. Submit to the form before deadline
    - [ ]  Link to your code (you can use any platform. GitHub is common)
    - [ ]  Repository is either public, or you've added me as a collaborator

#+BEGIN_QUOTE
*"Writing documentation is like saving for retirement. It's hard to tell if you have enough at the time you're doing it. Only later can you tell if you have enough, and usually you wish you had more." -J.Wirth*
#+END_QUOTE

** Elements of Style and Presentation
- [ ]  Clean Code
- [ ]  Indentation throughout code is uniform
- [ ]  Sensible comments
    - [ ]  Comments are included with each method, to describe why it exists
    - [ ]  Input parameters and output parameters described
    - [ ]  Comments describe classes
- [ ]  Variable names make sense

** Other Enhancements
  **Nice to have**

- [ ]  Sensible commits
    - [ ]  Each commit to version control makes sense
- [ ]  Testing
    - [ ]  Prepare a brief description of test cases to run on your code
    - [ ]  Prepare scripts/code for running the tests
    - [ ]  Report on the test cases

Elements included with your submission:

- [ ]  Project description
- [ ]  Instructions on how to run your program or code
- [ ]  Description of technologies used

*  References
- [Advice] Leslie Lamport. 2015. Who builds a house without drawing blueprints? *Communications of the ACM* 58, 4 (April 2015), 38โ41. DOI:[https://doi-org.ez-proxy.brooklyn.cuny.edu/10.1145/2736348](https://doi-org.ez-proxy.brooklyn.cuny.edu/10.1145/2736348)
- [Advice] Clean Code [https://cs.lmu.edu/~ray/notes/cleancode/](https://cs.lmu.edu/~ray/notes/cleancode/)
- [Advice] Planning a programming project [https://www.khanacademy.org/computing/computer-programming/programming/good-practices/a/planning-a-programming-project](https://www.khanacademy.org/computing/computer-programming/programming/good-practices/a/planning-a-programming-project)
