<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>projects on Getting Started Guides</title>
    <link>/categories/projects/</link>
    <description>Recent content in projects on Getting Started Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Nov 2020 00:00:00 -0500</lastBuildDate><atom:link href="/categories/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concepts of Web Development</title>
      <link>/Web-Development/2_concepts-of-web-dev/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 -0500</pubDate>
      
      <guid>/Web-Development/2_concepts-of-web-dev/</guid>
      <description>A website is rendered in a web browser through the HTTP Protocol. There&amp;rsquo;s a lot more one should learn about Internet Protocols, but it&amp;rsquo;s not required to get an operational understanding of working with websites.
Web Design Principles
The page that is rendered by the web browser is formatted in Hypertext Markup Language or HTML for short. HTML is a set of nested tags that describe how the page should be structured.</description>
    </item>
    
    <item>
      <title>Data Flow Diagrams</title>
      <link>/Software-Development/dataflowdiagrams/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 -0400</pubDate>
      
      <guid>/Software-Development/dataflowdiagrams/</guid>
      <description>What are Data Flow Diagrams (DFD)? #  This is a diagram that maps out the flow of information for any system. There are defined symbols like rectangles, circles, arrows, and so on to distinguish different parts of the system.
There are different kinds of data flow diagrams as well, most are separated into either logical DFD or Physical DFD. Logical data flow diagrams focuses on the system process(es). Physical data flow diagrams show how the data flow is implemented in the system.</description>
    </item>
    
    <item>
      <title>Process from idea to Product</title>
      <link>/Web-Development/process/1_process/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 -0400</pubDate>
      
      <guid>/Web-Development/process/1_process/</guid>
      <description>Building a website follows many of the principles of building a software application, which includes figuring out what to build ,managing the building, and validating the quality of the final product. In software development this specifica refers to various phases of structured activities such as planning (such as gathering spec requirements), scheduling the work, development, and test. The name for this set of phases is called Software development lifecycle (SDLC). Some of these phases are described below.</description>
    </item>
    
    <item>
      <title>Starting a Website</title>
      <link>/Web-Development/0_starting/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 -0400</pubDate>
      
      <guid>/Web-Development/0_starting/</guid>
      <description>This section focuses on the process, concepts, and tools for building any type of web site or web application. A website has a lot of overlapping functionality and technology as a web application, except it doesn&amp;rsquo;t focus on high volume of dynamism and user interactivity, which would require a database. This article mentions the two interchangeable. However, if one were precise, this article focuses on websites.</description>
    </item>
    
    <item>
      <title>Include a README with your project</title>
      <link>/Version-Control/2_readme/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 -0400</pubDate>
      
      <guid>/Version-Control/2_readme/</guid>
      <description>What is a README? #  This is a file that is named README, that usually resides in the root of your project directory. This name comes from the command Read me. as in the situation of handing a project off to another developer and writing a memo to them that should be read first before the source code.
In a way, it serves as an executive summary of your project.</description>
    </item>
    
    <item>
      <title>Build Tools</title>
      <link>/Software-Development/buildtools/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 -0400</pubDate>
      
      <guid>/Software-Development/buildtools/</guid>
      <description>What is a build tool? #  A build tool is a programming utility that automates a software build task, such as compiling source code, cleaning temporary files, and so on. A popular open source build tool is Make, another popular build tool is Maven
GNU Make #  Make is a build tool released by GNU. Make was original designed to work with C source code. Make configurations are specified by a text file named Makefile.</description>
    </item>
    
    <item>
      <title>Checklists</title>
      <link>/Version-Control/4_checklist/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 -0400</pubDate>
      
      <guid>/Version-Control/4_checklist/</guid>
      <description>Elements to include with your project repository #  Note that these items do not include anything about documentation, which should also be included with coding projects.
[ ] 1. Project description #   Description of the program such as a README file Project requirement(s) and tracking. Sample approaches listed below:   TODO file to track their task list  CHANGELOG file to track revisions, Use issue tracker that comes with a github repo, respond to issues in your commit messages Whatever else you think of that is relevant   Instructions on how to run your program or code Description of technologies used  [ ] 2.</description>
    </item>
    
    <item>
      <title>Sharing Coding Projects</title>
      <link>/Version-Control/codeprojects/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 -0400</pubDate>
      
      <guid>/Version-Control/codeprojects/</guid>
      <description>Project based thinking #  Programmers are typically learning to write source code to build programs not just scripts. A programming project requires far more than just fluency with a particular programming language syntax to cohesively put together.
Creating a program requires certain executive functioning skills to coordinate and manage. This guide provides some advice and items to consider include when sharing your codebase. It is not meant to be followed religiously, but instead to provide a framework to guide your approach.</description>
    </item>
    
    <item>
      <title>File naming conventions</title>
      <link>/Version-Control/filenames/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 -0500</pubDate>
      
      <guid>/Version-Control/filenames/</guid>
      <description>Introduction #  In the day to day work of programming, one often finds that a large fraction of time is spent looking for certain files. One of the wise adages with managing an assortment of files is to provide an organization scheme to make it easier to find what you need again. It not only helps you as the maintainer, but also helps your reader(s)** and collaborator(s) as well. This is a good habit to devleop before you find yourself managing hundreds of files.</description>
    </item>
    
  </channel>
</rss>
